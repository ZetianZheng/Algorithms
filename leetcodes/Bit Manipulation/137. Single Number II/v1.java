public class v1 {
    public int singleNumber(int[] nums) {
        // 一共就有32位bit的二进制数。
        // 因为每一个数字不是三个就是一个，所以我们把所有数的二进制位加起来，对每一位除以三，
        // 如果没法被三整除那么说明这个bit上是那一个数字的bit。
        // 这是因为每个bit不是0就是1，他们出现三次就会是三的倍数。
        // For example:
        // nums = [2,2,3,2]，那么它的各个元素对应的32位二进制数就是[00000000000000000000000000000010, 00000000000000000000000000000010, 00000000000000000000000000000011, 00000000000000000000000000000010]；
        // 接着，对这些二进制数的对应位进行求和，得到：[00000000000000000000000000000041]；
        // 对这个求和结果的每一位进行3的取模运算，得到：[00000000000000000000000000000011]；
        // 把上面的结果从二进制转换为十进制，就是：3。这就是我们的答案。

        int res = 0;
        for (int i = 0; i < 32; i++) {
            int sum = 0;
            for (int num : nums) {
                sum += (num>>i) & 1;
                
            }
            
            if (sum % 3 == 1) {
                res |= 1 << i; // 或等于
            }
        }
        
        return res;
    }
}
